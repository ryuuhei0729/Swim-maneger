      <% content_for :title, "Races" %>

<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- ヘッダー -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">レース</h1>
          <p class="mt-2 text-sm text-gray-600">あなたの大会での過去のレース結果を確認できます</p>
        </div>
                 <% if @available_competitions.any? %>
           <div data-controller="modal">
             <button data-action="click->modal#open" 
                     data-modal-id="entryModal"
                     class="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition duration-200 flex items-center space-x-2">
               <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
               </svg>
               <span>エントリーを提出する</span>
             </button>
           </div>
         <% end %>
      </div>
    </div>

    <% if @user.present? %>
        <div class="space-y-6">
          <% if @records.any? %>
            <% @records_by_event.each do |(event_title, event_date), records| %>
              <div class="bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 border border-gray-100 overflow-hidden">
                <!-- 大会ヘッダー -->
                <div class="bg-gradient-to-r from-blue-50 to-blue-100 px-6 py-4 border-b border-gray-200">
                  <div class="flex items-center justify-between">
                    <div>
                      <h4 class="text-lg font-semibold text-gray-900">
                        <%= event_title %>
                      </h4>
                      <p class="text-sm text-gray-600">
                        <%= event_date.strftime("%Y年%m月%d日") %>
                      </p>
                    </div>
                    <div class="text-right">
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        <%= records.count %>種目
                      </span>
                    </div>
                  </div>
                </div>
                
                <!-- 記録一覧 -->
                <div class="p-6">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <% records.each do |record| %>
                      <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer" data-action="click->modal#openRecord" data-record='<%= record.to_json(include: { style: { only: [:name_jp, :distance, :style] }, attendance_event: { only: [:title, :date] }, split_times: {} }) %>'>
                        <div class="flex items-center space-x-3">
                          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                            <%= record.style.name_jp %>
                          </span>
                          <span class="text-lg font-semibold text-gray-900">
                            <%= format_time(record.time) %>
                          </span>
                        </div>
                        <% if record.video_url.present? %>
                          <a href="<%= record.video_url %>" target="_blank" class="text-blue-600 hover:text-blue-800" onclick="event.stopPropagation();">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                          </a>
                        <% end %>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            <% end %>
          <% else %>
            <div class="bg-white rounded-xl shadow-sm p-12 text-center border border-gray-100">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">レース記録がありません</h3>
              <p class="mt-1 text-sm text-gray-500">大会でのレース結果が追加されるとここに表示されます</p>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<!-- エントリー提出モーダル -->
<%= render 'shared/modal', modal_id: 'entryModal', title: 'エントリー提出' do %>
  <%= form_with url: submit_entry_path, method: :post, local: false, id: "entryForm", class: "space-y-6" do |form| %>
        <!-- 大会選択 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">大会を選択してください</label>
          <%= form.select :event_id, 
              options_from_collection_for_select(@available_competitions, :id, 
                ->(event) { "#{event.title} (#{event.date.strftime('%Y年%m月%d日')})" }),
              { prompt: "大会を選択..." },
              { class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" } %>
        </div>

        <!-- 種目選択 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-4">エントリーする種目を選択してください</label>
          <div class="space-y-4">
            <% @all_styles.group_by(&:style).each do |style_type, styles| %>
              <% style_names = { 'fr' => '自由形', 'br' => '平泳ぎ', 'ba' => '背泳ぎ', 'fly' => 'バタフライ', 'im' => '個人メドレー' } %>
              <div class="border border-gray-200 rounded-lg p-4">
                <h4 class="text-lg font-semibold text-gray-800 mb-3">
                  <%= style_names[style_type] || style_type %>
                </h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <% styles.each do |style| %>
                    <div class="flex items-center space-x-3">
                      <input type="checkbox" 
                             id="style_<%= style.id %>" 
                             onchange="toggleTimeInput(<%= style.id %>)"
                             class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
                      <label for="style_<%= style.id %>" class="text-sm font-medium text-gray-700 flex-1">
                        <%= style.name_jp %>
                      </label>
                      <input type="text" 
                             name="selected_styles[<%= style.id %>]"
                             id="time_<%= style.id %>"
                             placeholder="MM:SS.ss"
                             disabled
                             class="w-24 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100">
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        </div>

        <!-- 提出ボタン -->
        <div class="flex justify-end pt-4 border-t border-gray-200">
          <button type="submit" 
                  class="px-6 py-2 text-sm font-medium text-white bg-green-600 hover:bg-green-700 rounded-lg transition duration-200">
            エントリーを提出
          </button>
        </div>
      <% end %>
<% end %>

<%= render 'shared/modal', modal_id: 'recordDetailModal', title: 'レース詳細' do %>
  <div id="recordDetailContent">
    <!-- 詳細内容はJSで埋め込み -->
  </div>
<% end %>

<script>
function toggleTimeInput(styleId) {
  const checkbox = document.getElementById(`style_${styleId}`);
  const timeInput = document.getElementById(`time_${styleId}`);
  
  if (checkbox.checked) {
    timeInput.disabled = false;
    timeInput.focus();
  } else {
    timeInput.disabled = true;
    timeInput.value = '';
  }
}

function resetEntryForm() {
  // フォームをリセット
  document.getElementById('entryForm').reset();
  
  // チェックボックスとタイム入力をリセット
  document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
    checkbox.checked = false;
  });
  document.querySelectorAll('input[id^="time_"]').forEach(input => {
    input.disabled = true;
    input.value = '';
  });
}

// フォーム送信処理
document.getElementById('entryForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  
  // 選択された種目があるかチェック
  let hasSelectedStyle = false;
  document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
    const styleId = checkbox.id.replace('style_', '');
    const timeInput = document.getElementById(`time_${styleId}`);
    if (timeInput.value.trim() !== '') {
      hasSelectedStyle = true;
    }
  });
  
  if (!hasSelectedStyle) {
    alert('エントリーする種目とタイムを入力してください。');
    return;
  }
  
  fetch(this.action, {
    method: 'POST',
    body: formData,
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(data.message);
      // モーダルを閉じる（既存のシステムを利用）
      document.getElementById('entryModal').classList.add('hidden');
      resetEntryForm();
      // ページをリロードして更新された情報を表示
      window.location.reload();
    } else {
      alert(data.message || 'エラーが発生しました。');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('エラーが発生しました。');
  });
});

function formatDate(dateStr) {
  if (!dateStr) return '';
  const d = new Date(dateStr);
  return `${d.getFullYear()}年${d.getMonth()+1}月${d.getDate()}日`;
}
function formatTime(seconds) {
  if (!seconds || seconds === 0) return '-';
  const min = Math.floor(seconds / 60);
  const sec = (seconds % 60).toFixed(2);
  return min > 0 ? `${min}:${('0'+sec).slice(-5)}` : sec;
}
function calcLapTimes(splitTimes) {
  if (!splitTimes || splitTimes.length === 0) return [];
  let prev = 0;
  return splitTimes.map(st => {
    const lap = st.split_time - prev;
    prev = st.split_time;
    return { distance: st.distance, lap_time: lap };
  });
}
function openRecordModal(record) {
  const competitionTitle = record.attendance_event ? record.attendance_event.title : '';
  const competitionDate = record.attendance_event ? formatDate(record.attendance_event.date) : '';
  const style = record.style ? record.style.name_jp : '';
  const userName = '<%= j(@user.name) %>';
  const time = formatTime(record.time);
  const splitTimes = record.split_times || [];
  const lapTimes = calcLapTimes(splitTimes);
  const videoUrl = record.video_url;
  const note = record.note || '';

  // 種目の距離を取得
  const raceDistance = record.style ? record.style.distance : 0;
  
  // 最終タイムを秒数で取得
  const finalTimeInSeconds = record.time;

  // 距離のリスト（25m刻みで最大200mまで）
  const allDistances = [25, 50, 75, 100, 125, 150, 175, 200];
  
  // Split timeデータをマップ化
  const splitTimeMap = {};
  splitTimes.forEach(st => {
    splitTimeMap[st.distance] = st.split_time;
  });
  
  // Lap timeデータをマップ化（split timeと等しい場合は除外）
  const lapTimeMap = {};
  lapTimes.forEach(lt => {
    // lap timeがsplit timeと等しくない場合のみ格納
    if (lt.lap_time !== splitTimeMap[lt.distance]) {
      lapTimeMap[lt.distance] = lt.lap_time;
    }
  });
  
  // 最後のsplit timeと最終タイムの差分を計算
  if (splitTimes.length > 0) {
    const lastSplitTime = splitTimes[splitTimes.length - 1];
    if (lastSplitTime.distance < raceDistance) {
      const finalLapTime = finalTimeInSeconds - lastSplitTime.split_time;
      if (finalLapTime > 0) {
        lapTimeMap[raceDistance] = finalLapTime;
      }
    }
  }

  let html = `
    <div class="space-y-6">
      <!-- ヘッダー部分 -->
      <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center space-x-3">
            <div class="bg-blue-100 rounded-full p-2">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-lg font-bold text-gray-900">レース記録</h3>
              <p class="text-gray-500 text-sm">${competitionDate}</p>
            </div>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-blue-600">${time}</div>
            <div class="text-gray-500 text-sm">記録タイム</div>
          </div>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div class="bg-gray-50 rounded-lg p-3">
            <div class="text-gray-500 text-xs mb-1">大会</div>
            <div class="font-semibold text-gray-900">${competitionTitle}</div>
          </div>
          <div class="bg-gray-50 rounded-lg p-3">
            <div class="text-gray-500 text-xs mb-1">選手</div>
            <div class="font-semibold text-gray-900">${userName}</div>
          </div>
        </div>
      </div>

      <!-- 種目情報 -->
      <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <div class="bg-blue-100 rounded-full p-2">
              <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div>
              <div class="text-gray-500 text-sm">種目</div>
              <div class="font-bold text-lg text-gray-900">${style}</div>
            </div>
          </div>
          <div class="text-right">
            <div class="text-3xl font-bold text-blue-600">${time}</div>
            <div class="text-gray-500 text-sm">ベストタイム</div>
          </div>
        </div>
      </div>

      <!-- タイム詳細テーブル -->
      <div class="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden">
        <div class="bg-gradient-to-r from-gray-50 to-gray-100 px-4 py-3 border-b border-gray-200">
          <h4 class="font-bold text-gray-800 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            詳細タイム分析
          </h4>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full text-sm text-center">
            <thead>
              <tr class="bg-gradient-to-r from-blue-50 to-indigo-50">
                <th class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-200"></th>
                <th class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-200">Split time</th>
                <th class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-200">25m lap</th>
                <th class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-200">50m lap</th>
                <th class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-200">100m lap</th>
              </tr>
            </thead>
            <tbody>
              ${allDistances.map(distance => {
                let splitTime = splitTimeMap[distance] ? formatTime(splitTimeMap[distance]) : '';
                
                // 種目の距離と一致する場合は最終タイムを表示
                if (distance === raceDistance && !splitTime) {
                  splitTime = time;
                }
                
                // 25m lapの1つ目（25m行）は空欄
                const lapTime25 = (distance === 25) ? '' : (lapTimeMap[distance] ? formatTime(lapTimeMap[distance]) : '');
                
                // 50m lapは50m, 100m, 150m, 200mの行にのみ表示（ただし50m行は空欄）
                let lapTime50 = '';
                if (distance % 50 === 0 && distance !== 50) {
                  const prevDistance = distance - 25;
                  if (lapTimeMap[prevDistance] && lapTimeMap[distance]) {
                    lapTime50 = formatTime(lapTimeMap[prevDistance] + lapTimeMap[distance]);
                  }
                }
                
                // 100m lapは100m, 200mの行にのみ表示（ただし100m行は空欄）
                let lapTime100 = '';
                if (distance % 100 === 0 && distance !== 100) {
                  let sum = 0;
                  let hasAllLaps = true;
                  for (let d = distance - 75; d <= distance; d += 25) {
                    if (lapTimeMap[d]) {
                      sum += lapTimeMap[d];
                    } else {
                      hasAllLaps = false;
                      break;
                    }
                  }
                  if (hasAllLaps && sum > 0) {
                    lapTime100 = formatTime(sum);
                  }
                }
                
                const isHighlighted = distance === raceDistance;
                
                return `
                  <tr class="${isHighlighted ? 'bg-gradient-to-r from-yellow-50 to-orange-50 border-l-4 border-orange-400' : 'hover:bg-gray-50'}">
                    <td class="px-3 py-2 font-semibold text-gray-700 border-b border-gray-100">${distance}m</td>
                    <td class="px-3 py-2 border-b border-gray-100 ${splitTime ? 'font-mono text-blue-700 font-semibold' : ''}">${splitTime}</td>
                    <td class="px-3 py-2 border-b border-gray-100 ${lapTime25 ? 'font-mono text-green-600' : ''}">${lapTime25}</td>
                    <td class="px-3 py-2 border-b border-gray-100 ${lapTime50 ? 'font-mono text-purple-600' : ''}">${lapTime50}</td>
                    <td class="px-3 py-2 border-b border-gray-100 ${lapTime100 ? 'font-mono text-pink-600' : ''}">${lapTime100}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>

      <!-- 追加情報 -->
      <div class="flex flex-wrap gap-3">
        ${videoUrl ? `
          <div class="bg-blue-600 rounded-lg p-3 text-white shadow-lg flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            <a href="${videoUrl}" target="_blank" class="font-semibold hover:underline">動画を見る</a>
          </div>
        ` : ''}
        ${note ? `
          <div class="bg-gray-100 rounded-lg p-3 text-gray-700 shadow-lg flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <span class="font-semibold">${note}</span>
          </div>
        ` : ''}
      </div>

      <!-- フッター -->
      <div class="text-center text-gray-500 text-xs">
        <div class="flex items-center justify-center space-x-2">
          <span>Swim Manager</span>
        </div>
      </div>
    </div>
  `;
  document.getElementById('recordDetailContent').innerHTML = html;
  document.getElementById('recordDetailModal').classList.remove('hidden');
}
function closeRecordModal() {
  document.getElementById('recordDetailModal').classList.add('hidden');
}
// モーダル用イベントデリゲート
if (!window.recordModalInitialized) {
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('[data-action="click->modal#openRecord"]').forEach(el => {
      el.addEventListener('click', function() {
        const record = JSON.parse(this.getAttribute('data-record'));
        openRecordModal(record);
      });
    });
  });
  window.recordModalInitialized = true;
}
</script> 